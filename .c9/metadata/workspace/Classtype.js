{"changed":true,"filter":false,"title":"Classtype.js","tooltip":"/Classtype.js","value":"//--------------------------------------------------------------------------------------------------\n\nmodule.exports = (function() {\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Копирует метод или свойство\n|\n|-------------------------------------------------------------------------------------------------*/\n\n    var copy = function(parent, child, field, warp) {\n    // Получаем родительские геттер и сеттер\n        var getter = parent.__lookupGetter__(field);\n        var setter = parent.__lookupSetter__(field);\n        \n    // Проверяем наличие геттера и сеттера\n        if (getter || setter) {\n            if (getter) child.__defineGetter__(field, warp ? warp(getter) : getter);\n            if (setter) child.__defineSetter__(field, warp ? warp(setter) : setter);\n        }\n        \n    // Обычный метод или свойство\n        else child[field] = warp ? warp(parent[field]) : parent[field];\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Проверяет наличие в объекте функции, геттера или сеттера\n|\n|-------------------------------------------------------------------------------------------------*/\n    \n    var isMethod = function(obj, field) {\n    // Функция\n        if (typeof obj[field] == 'function') return true;\n        \n    // Геттер\n        if (obj.__lookupGetter__(field)) return true;\n        \n    // Сеттер\n        if (obj.__lookupSetter__(field)) return true;\n        \n    // В объекте obj поле field не является не функцией, не геттером и не сеттером\n        return false;\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Преобразовает из исходного во внутренне представление (для поиска и переопределения)\n|\n|-------------------------------------------------------------------------------------------------*/\n    \n    var parse = function(args) {\n    // Методы и свойства\n        var p = [\n            {},// Список типов доступа\n            {}// Список методов и свойств\n        ];\n        \n    // Список типов доступа\n        var types = {\n            public: 0,// Публичные\n            protected: 1,// Защищенные\n            private: 2// Приватные\n        };\n        \n    // Проходим по списку методов и свойств\n        for (var i = 0; i < args.length; i++) {\n        // Тип доступа (public/protected/private)\n            for (var type in args[i]);\n            \n        // Название метода\n            for (var field in args[i][type]);\n            \n        // Сохраняем тип доступа\n            p[0][field] = types[type];\n            \n        // Копируем метод\n            copy(args[i][type], p[1], field);\n        }\n        \n    // Возвращаем внутренне представление (для поиска и переопределения)\n        return p;\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Преобразовает из исходного во внутренне представление (для конечного пользования)\n|\n|-------------------------------------------------------------------------------------------------*/\n\n    var getParams = function(child) {\n    // Список параметров\n        var p = [\n        // Методы\n            [\n                {},// Публичные\n                {},// Защищенные\n                {}// Приватные\n            ],\n            \n        // Свойства\n            [\n                {},// Публичные\n                {},// Защищенные\n                {}// Приватные\n            ]\n        ];\n        \n    // Проходим по списку методов и свойств\n        for (var field in child[1]) {\n        // Копируем метод\n            if (isMethod(child[1], field)) {\n                copy(child[1], p[0][child[0][field]], field);\n            }\n            \n        // Копируем свойство\n            else {\n                copy(child[1], p[1][child[0][field]], field);\n            }\n        }\n        \n    // Возвращаем внутренне представление (для конечного пользования)\n        return p;\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Переопределяет методы для одного типа\n|\n|-------------------------------------------------------------------------------------------------*/\n\n    var extendMethod = function(parent, child, warp) {\n    // Проходим по списку методов\n        for (var field in parent) {\n        // Копируем метод\n            copy(parent, child, field, warp);\n        }\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Переопределяет свойства для одного типа\n|\n|-------------------------------------------------------------------------------------------------*/\n    \n    var extendProperty = function(parent, child, privateField, pass) {\n    // Проходим по списку свойств\n        for (var field in parent) {\n        // Перевод свойства в геттер и сеттер\n            if (privateField) {\n                (function(field) {\n                    child.__defineGetter__(field, function() {\n                        return this[privateField](pass)[field];\n                    });\n                    child.__defineSetter__(field, function(val) {\n                        this[privateField](pass)[field] = val;\n                    });\n                })(field);\n            }\n            \n        // Копируем свойство\n            else {\n                copy(parent, child, field);\n            }\n        }\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Переопределяет методы для нескольких типов\n|\n|-------------------------------------------------------------------------------------------------*/\n    \n    var extendMethods = function(parent, child) {\n    // Проходим по списку типов доступа\n        for (var i = 0; i < parent.length; i++) {\n        // Проходим по списку методов\n            extendMethod(parent[i], child);\n        }\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Переопределяет свойства для нескольких типов\n|\n|-------------------------------------------------------------------------------------------------*/\n\n    var extendProperties = function(parent, child) {\n    // Проходим по списку типов доступа\n        for (var i = 0; i < parent.length; i++) {\n        // Проходим по списку свойств\n            extendProperty(parent[i], child);\n        }\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Добавляет список методов и свойств к прототипам классов Self и Private\n|\n|-------------------------------------------------------------------------------------------------*/\n    \n    var extendPrototype = function(Self, Private, params, privateField, pass) {\n    // Добавляем список публичных методов к прототипу класса Self\n    // Типы доступа: Публичны\n        extendMethod(params[0][0], Self.prototype, function(method) {\n            return function() {\n                return method.apply(this[privateField](pass), arguments);\n            }\n        });\n        \n    // Добавляем список публичных свойств к прототипу класса Self\n    // Типы доступа: Публичны\n        extendProperty(params[1][0], Self.prototype, privateField, pass);\n        \n    // Добавляем список методов к прототипу класса Private\n    // Типы доступа: Публичны, Защищенные, Приватные\n        extendMethods(params[0], Private.prototype);\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Переопределяет методы\n|\n|-------------------------------------------------------------------------------------------------*/\n\n    var extend = function(parent, child, type) {\n        for (var field in parent[1]) {\n        // Отсеиваем методы и свойства ненужного типа\n            if (parent[0][field] == type) continue;\n            \n        // Отсеиваем методы и свойства\n        // которые уже присутствуют в child\n            if (field in child[0]) continue;\n            \n        // Сохраняем тип доступа\n            child[0][field] = parent[0][field];\n            \n        // Копируем метод\n            copy(parent[1], child[1], field);\n        }\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Конструктор нового класса\n|\n|-------------------------------------------------------------------------------------------------*/\n\n    var constructor = function(params, parent) {\n    // Название скрытого свойства\n    // для доступа к приватным методам и свойствам\n        var privateField = Math.random();\n        \n    // Пароль для доступа к приватным методам и свойствам\n        var pass = Math.random();\n        \n    // Класс для приватных методов и свойств\n        var Private = function() {};\n        \n    // Конструктор нового класса\n        var Self = function() {\n        // Создаем экземпляр класса для приватных методов и свойств\n            var _private = new Private();\n            \n        // Добавляем список свойств к обьекту _private\n        // Типы доступа: Публичны, Защищенные, Приватные\n            extendProperties(params[1], _private);\n            \n        // Добавляем скрытое свойство к обьекту this\n        // для доступа к приватным методам и свойствам\n        // через прототипные методы, геттеры, сеттеры и публичные свойства\n            Object.defineProperty(this, privateField, {value: function(val) {\n                if (val == pass) {\n                    return _private;\n                }\n            }});\n        };\n        \n    // Добавляем список методов и свойств к прототипам классов Self и Private\n        extendPrototype(Self, Private, params, privateField, pass);\n        \n    // Трейт\n        Self['trait'] = function() {\n        // Преобразоваем из исходного во внутренне представление\n        // для поиска и переопределения\n            var child = parse(arguments);\n            \n        // Добавляем новые или переопределяем унаследованные методы и свойства родителя\n        // Типы доступа: Публичны, Защищенные\n            extend(parent, child, -1);\n            \n        // Преобразоваем из исходного во внутренне представление\n        // для конечного пользования\n            params = getParams(child);\n            \n        // Добавляем список методов и свойств к прототипам классов Self и Private\n            extendPrototype(Self, Private, params, privateField, pass);\n        };\n        \n    // Наследование\n        Self['extend'] = function() {\n        // Преобразоваем из исходного во внутренне представление\n        // для поиска и переопределения\n            var child = parse(arguments);\n            \n        // Добавляем новые или переопределяем унаследованные методы и свойства родителя\n        // Типы доступа: Публичны, Защищенные\n            extend(parent, child, 2);\n            \n        // Возвращаем конструктор нового класса\n            return constructor(getParams(child), child);\n        };\n        \n    // Возвращаем текущий класс\n        return Self;\n    };\n    \n/*--------------------------------------------------------------------------------------------------\n|\n| -> Наследование\n|\n|-------------------------------------------------------------------------------------------------*/\n\n    return {\n        extend: function() {\n        // Преобразоваем из исходного во внутренне представление\n        // для поиска и переопределения\n            var child = parse(arguments);\n            \n        // Возвращаем конструктор нового класса\n            return constructor(getParams(child), child);\n        }\n    };\n})();\n\n//--------------------------------------------------------------------------------------------------","undoManager":{"mark":-1,"position":4,"stack":[[{"group":"doc","deltas":[{"start":{"row":2,"column":0},"end":{"row":2,"column":13},"action":"remove","lines":["var Classtype"]},{"start":{"row":2,"column":0},"end":{"row":2,"column":14},"action":"insert","lines":["module.exports"]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"remove","lines":["="]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"insert","lines":["="]}]}]]},"ace":{"folds":[],"scrolltop":4260,"scrollleft":0,"selection":{"start":{"row":315,"column":6},"end":{"row":315,"column":6},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":303,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1420966179589}